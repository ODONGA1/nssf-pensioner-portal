// Prisma schema file for NSSF Pensioner Self-Service Portal

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  PENSIONER
  ADMIN
  SUPPORT_STAFF
  FINANCE_OFFICER
}

enum PensionStatus {
  ACTIVE
  SUSPENDED
  DECEASED
  TRANSFERRED
  PENDING
}

enum BenefitType {
  AGE
  SURVIVORS
  INVALIDITY
  WITHDRAWAL
  MIDTERM
  EMIGRATION
  EXEMPTED
}

enum PaymentStatus {
  PENDING
  PROCESSED
  FAILED
  CANCELLED
  REVERSED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum MessageStatus {
  UNREAD
  READ
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PROFILE_UPDATE
}

// Voluntary Savings Enums
enum SavingsAccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum SavingsTransactionType {
  DEPOSIT
  WITHDRAWAL
  INTEREST_CREDIT
  FEE_DEBIT
  TRANSFER_IN
  TRANSFER_OUT
}

enum SavingsTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  PROCESSING
}

// Mid-term Access Enums
enum MidtermAccessReason {
  MEDICAL_EMERGENCY
  EDUCATION
  HOUSING
  BUSINESS_INVESTMENT
  FUNERAL_EXPENSES
  MARRIAGE
  OTHER
}

enum MidtermAccessStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  DISBURSED
  CANCELLED
}

enum MidtermApprovalLevel {
  INITIAL_REVIEW
  SUPERVISOR_REVIEW
  MANAGER_APPROVAL
  FINAL_APPROVAL
}

enum DocumentVerificationStatus {
  NOT_SUBMITTED
  SUBMITTED
  UNDER_REVIEW
  VERIFIED
  REJECTED
  RESUBMIT_REQUIRED
}

// Models
model Pensioners {
  pensioner_id          String        @id @default(uuid()) @db.Uuid
  nssf_number          String        @unique @db.VarChar(20)
  national_id_number   String        @unique @db.VarChar(20)
  first_name           String        @db.VarChar(100)
  middle_name          String?       @db.VarChar(100)
  last_name            String        @db.VarChar(100)
  date_of_birth        DateTime      @db.Date
  gender               String?       @db.Char(1)
  nationality          String        @default("Ugandan") @db.VarChar(50)
  
  // Contact Information
  phone_number         String?       @db.VarChar(20)
  email_address        String?       @db.VarChar(255)
  postal_address       String?       @db.Text
  physical_address     String?       @db.Text
  district             String?       @db.VarChar(100)
  region               String?       @db.VarChar(100)
  
  // Employment Information
  last_employer        String?       @db.VarChar(255)
  employment_start_date DateTime?    @db.Date
  employment_end_date  DateTime?     @db.Date
  total_service_years  Decimal?      @db.Decimal(5,2)
  
  // Banking Information
  bank_name            String?       @db.VarChar(100)
  bank_account_number  String?       @db.VarChar(50)
  bank_branch          String?       @db.VarChar(100)
  
  // Status and Metadata
  pension_status       PensionStatus @default(PENDING)
  registration_date    DateTime      @default(now())
  last_updated         DateTime      @default(now()) @updatedAt
  profile_photo_url    String?       @db.VarChar(500)
  
  // Verification
  is_verified          Boolean       @default(false)
  verification_date    DateTime?
  verified_by          String?       @db.Uuid
  
  // Soft delete
  is_deleted           Boolean       @default(false)
  deleted_at           DateTime?
  
  // Relations
  users                Users[]
  benefits             Benefits[]
  documents            Documents[]
  messages_as_pensioner Messages[]
  verification_requests VerificationRequests[]
  audit_logs           AuditLogs[]
  voluntary_savings    VoluntarySavingsAccounts[]
  midterm_applications MidtermAccessApplications[]

  @@map("pensioners")
}

model Users {
  user_id               String    @id @default(uuid()) @db.Uuid
  pensioner_id          String?   @db.Uuid
  username              String    @unique @db.VarChar(50)
  password_hash         String    @db.VarChar(255)
  role                  UserRole  @default(PENSIONER)
  
  // Security settings
  is_active             Boolean   @default(true)
  is_locked             Boolean   @default(false)
  failed_login_attempts Int       @default(0)
  last_login            DateTime?
  password_last_changed DateTime  @default(now())
  must_change_password  Boolean   @default(false)
  
  // Multi-factor authentication
  mfa_enabled           Boolean   @default(false)
  mfa_secret            String?   @db.VarChar(32)
  backup_codes          String[]
  
  // Session management
  current_session_token String?   @db.VarChar(255)
  session_expires_at    DateTime?
  refresh_token         String?   @db.VarChar(255)
  refresh_token_expires_at DateTime?
  
  // Metadata
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now()) @updatedAt
  last_password_reset   DateTime?
  
  // Relations
  pensioners            Pensioners? @relation(fields: [pensioner_id], references: [pensioner_id])
  messages_sent         Messages[] @relation("MessageSender")
  messages_received     Messages[] @relation("MessageRecipient")
  notifications         Notifications[]
  verification_requests_created VerificationRequests[] @relation("VerificationRequestor")
  verification_requests_reviewed VerificationRequests[] @relation("VerificationReviewer")
  audit_logs            AuditLogs[]
  system_settings       SystemSettings[]
  midterm_approvals     MidtermApprovalWorkflow[]
  document_verifications MidtermSupportingDocuments[] @relation("DocumentVerifier")
  document_uploads      MidtermSupportingDocuments[] @relation("DocumentUploader")

  @@map("users")
}

model Benefits {
  benefit_id            String      @id @default(uuid()) @db.Uuid
  pensioner_id          String      @db.Uuid
  benefit_type          BenefitType
  
  // Benefit calculation details
  monthly_benefit_amount Decimal    @db.Decimal(15,2)
  annual_benefit_amount  Decimal    @db.Decimal(15,2)
  commutation_amount     Decimal?   @db.Decimal(15,2)
  total_contributions    Decimal?   @db.Decimal(15,2)
  interest_earned        Decimal?   @db.Decimal(15,2)
  
  // Benefit period
  benefit_start_date     DateTime   @db.Date
  benefit_end_date       DateTime?  @db.Date
  next_review_date       DateTime?  @db.Date
  
  // Status and approval
  is_active             Boolean     @default(true)
  approved_by           String?     @db.Uuid
  approval_date         DateTime?
  approval_comments     String?     @db.Text
  
  // Metadata
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  
  // Relations
  pensioners            Pensioners  @relation(fields: [pensioner_id], references: [pensioner_id])
  payments              Payments[]

  @@map("benefits")
}

model Payments {
  payment_id            String        @id @default(uuid()) @db.Uuid
  benefit_id            String        @db.Uuid
  
  // Payment details
  payment_amount        Decimal       @db.Decimal(15,2)
  payment_date          DateTime      @db.Date
  payment_period_start  DateTime      @db.Date
  payment_period_end    DateTime      @db.Date
  payment_method        String        @default("BANK_TRANSFER") @db.VarChar(50)
  
  // Bank transfer details
  bank_reference_number String?       @db.VarChar(100)
  transaction_reference String?       @db.VarChar(100)
  
  // Status tracking
  payment_status        PaymentStatus @default(PENDING)
  initiated_date        DateTime      @default(now())
  processed_date        DateTime?
  failed_reason         String?       @db.Text
  
  // Processing information
  processed_by          String?       @db.Uuid
  batch_id              String?       @db.VarChar(50)
  
  // Accounting
  debit_account         String?       @db.VarChar(20)
  credit_account        String?       @db.VarChar(20)
  
  // Metadata
  created_at            DateTime      @default(now())
  updated_at            DateTime      @default(now()) @updatedAt
  
  // Relations
  benefits              Benefits      @relation(fields: [benefit_id], references: [benefit_id])

  @@map("payments")
}

model Documents {
  document_id           String      @id @default(uuid()) @db.Uuid
  pensioner_id          String      @db.Uuid
  
  // Document details
  document_name         String      @db.VarChar(255)
  document_type         String      @db.VarChar(50)
  document_category     String?     @db.VarChar(50)
  file_path             String?     @db.VarChar(500)
  file_size             BigInt?
  mime_type             String?     @db.VarChar(100)
  
  // Document metadata
  document_date         DateTime?   @db.Date
  is_public             Boolean     @default(false)
  download_count        Int         @default(0)
  
  // Security
  is_encrypted          Boolean     @default(true)
  encryption_key        String?     @db.VarChar(255)
  
  // Metadata
  uploaded_by           String?     @db.Uuid
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  
  // Relations
  pensioners            Pensioners  @relation(fields: [pensioner_id], references: [pensioner_id])

  @@map("documents")
}

model Messages {
  message_id            String        @id @default(uuid()) @db.Uuid
  
  // Participants
  sender_id             String        @db.Uuid
  recipient_id          String        @db.Uuid
  pensioner_id          String        @db.Uuid
  
  // Message content
  subject               String        @db.VarChar(255)
  message_body          String        @db.Text
  attachment_ids        String[]      @db.Uuid
  
  // Threading
  parent_message_id     String?       @db.Uuid
  thread_id             String?       @db.Uuid
  
  // Status tracking
  message_status        MessageStatus @default(UNREAD)
  is_urgent             Boolean       @default(false)
  
  // Timestamps
  sent_at               DateTime      @default(now())
  read_at               DateTime?
  archived_at           DateTime?
  
  // Metadata
  created_at            DateTime      @default(now())
  updated_at            DateTime      @default(now()) @updatedAt
  
  // Relations
  sender                Users         @relation("MessageSender", fields: [sender_id], references: [user_id])
  recipient             Users         @relation("MessageRecipient", fields: [recipient_id], references: [user_id])
  pensioners            Pensioners    @relation(fields: [pensioner_id], references: [pensioner_id])
  parent_message        Messages?     @relation("MessageThread", fields: [parent_message_id], references: [message_id])
  replies               Messages[]    @relation("MessageThread")

  @@map("messages")
}

model VerificationRequests {
  request_id            String             @id @default(uuid()) @db.Uuid
  pensioner_id          String             @db.Uuid
  requested_by          String             @db.Uuid
  
  // Request details
  request_type          String             @db.VarChar(50)
  request_data          Json
  current_data          Json?
  
  // Supporting documents
  supporting_documents  String[]           @db.Uuid
  
  // Status and processing
  verification_status   VerificationStatus @default(PENDING)
  reviewed_by           String?            @db.Uuid
  review_date           DateTime?
  review_comments       String?            @db.Text
  rejection_reason      String?            @db.Text
  
  // Metadata
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now()) @updatedAt
  expires_at            DateTime
  
  // Relations
  pensioners            Pensioners         @relation(fields: [pensioner_id], references: [pensioner_id])
  requestor             Users              @relation("VerificationRequestor", fields: [requested_by], references: [user_id])
  reviewer              Users?             @relation("VerificationReviewer", fields: [reviewed_by], references: [user_id])

  @@map("verification_requests")
}

model Notifications {
  notification_id       String      @id @default(uuid()) @db.Uuid
  user_id               String      @db.Uuid
  
  // Notification content
  title                 String      @db.VarChar(255)
  message               String      @db.Text
  notification_type     String      @db.VarChar(50)
  
  // Targeting
  is_global             Boolean     @default(false)
  target_roles          UserRole[]
  
  // Status
  is_read               Boolean     @default(false)
  read_at               DateTime?
  
  // Delivery
  delivery_method       String      @default("SYSTEM") @db.VarChar(50)
  is_delivered          Boolean     @default(false)
  delivered_at          DateTime?
  
  // Metadata
  created_at            DateTime    @default(now())
  expires_at            DateTime
  
  // Relations
  users                 Users       @relation(fields: [user_id], references: [user_id])

  @@map("notifications")
}

model AuditLogs {
  log_id                String       @id @default(uuid()) @db.Uuid
  
  // Actor information
  user_id               String?      @db.Uuid
  pensioner_id          String?      @db.Uuid
  session_id            String?      @db.VarChar(255)
  
  // Action details
  action                AuditAction
  table_name            String?      @db.VarChar(100)
  record_id             String?      @db.Uuid
  
  // Change tracking
  old_values            Json?
  new_values            Json?
  
  // Request information
  ip_address            String?
  user_agent            String?      @db.Text
  request_path          String?      @db.VarChar(500)
  request_method        String?      @db.VarChar(10)
  
  // Metadata
  timestamp             DateTime     @default(now())
  description           String?      @db.Text
  
  // Relations
  users                 Users?       @relation(fields: [user_id], references: [user_id])
  pensioners            Pensioners?  @relation(fields: [pensioner_id], references: [pensioner_id])

  @@map("audit_logs")
}

model SystemSettings {
  setting_id            String      @id @default(uuid()) @db.Uuid
  setting_key           String      @unique @db.VarChar(100)
  setting_value         String?     @db.Text
  setting_type          String      @default("STRING") @db.VarChar(20)
  description           String?     @db.Text
  is_sensitive          Boolean     @default(false)
  category              String?     @db.VarChar(50)
  
  // Metadata
  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt
  updated_by            String?     @db.Uuid
  
  // Relations
  updater               Users?      @relation(fields: [updated_by], references: [user_id])

  @@map("system_settings")
}

// Voluntary Savings Models
model VoluntarySavingsAccounts {
  savings_account_id    String                 @id @default(uuid()) @db.Uuid
  pensioner_id          String                 @db.Uuid
  account_number        String                 @unique @db.VarChar(20)
  
  // Account Details
  account_name          String                 @db.VarChar(255)
  account_type          String                 @default("VOLUNTARY_SAVINGS") @db.VarChar(50)
  currency              String                 @default("UGX") @db.VarChar(3)
  
  // Balance Information
  current_balance       Decimal                @default(0) @db.Decimal(15,2)
  available_balance     Decimal                @default(0) @db.Decimal(15,2)
  minimum_balance       Decimal                @default(50000) @db.Decimal(15,2) // UGX 500
  
  // Interest Information
  interest_rate         Decimal                @default(0.08) @db.Decimal(5,4) // 8% annual
  last_interest_date    DateTime?
  total_interest_earned Decimal                @default(0) @db.Decimal(15,2)
  
  // Account Status
  account_status        SavingsAccountStatus   @default(ACTIVE)
  opening_date          DateTime               @default(now())
  closing_date          DateTime?
  
  // Banking Information
  linked_bank_account   String?                @db.VarChar(50)
  auto_save_amount      Decimal?               @db.Decimal(15,2)
  auto_save_frequency   String?                @db.VarChar(20) // MONTHLY, QUARTERLY
  next_auto_save_date   DateTime?
  
  // Limits and Restrictions
  daily_withdrawal_limit Decimal               @default(5000000) @db.Decimal(15,2) // UGX 50,000
  monthly_deposit_limit  Decimal               @default(50000000) @db.Decimal(15,2) // UGX 500,000
  
  // Metadata
  created_at            DateTime               @default(now())
  updated_at            DateTime               @default(now()) @updatedAt
  created_by            String?                @db.Uuid
  
  // Relations
  pensioner             Pensioners             @relation(fields: [pensioner_id], references: [pensioner_id])
  transactions          SavingsTransactions[]
  midterm_applications  MidtermAccessApplications[]

  @@map("voluntary_savings_accounts")
}

model SavingsTransactions {
  transaction_id        String                    @id @default(uuid()) @db.Uuid
  savings_account_id    String                    @db.Uuid
  
  // Transaction Details
  transaction_type      SavingsTransactionType
  transaction_amount    Decimal                   @db.Decimal(15,2)
  transaction_fee       Decimal                   @default(0) @db.Decimal(15,2)
  net_amount            Decimal                   @db.Decimal(15,2)
  
  // Balance Information
  balance_before        Decimal                   @db.Decimal(15,2)
  balance_after         Decimal                   @db.Decimal(15,2)
  
  // Transaction Details
  description           String                    @db.Text
  reference_number      String                    @unique @db.VarChar(50)
  external_reference    String?                   @db.VarChar(100)
  
  // Status and Timing
  transaction_status    SavingsTransactionStatus  @default(PENDING)
  transaction_date      DateTime                  @default(now())
  value_date            DateTime?
  processed_date        DateTime?
  
  // Payment Method
  payment_method        String?                   @db.VarChar(50) // BANK_TRANSFER, MOBILE_MONEY, CASH
  bank_reference        String?                   @db.VarChar(100)
  
  // Processing Information
  processed_by          String?                   @db.Uuid
  batch_id              String?                   @db.VarChar(50)
  failure_reason        String?                   @db.Text
  
  // Metadata
  created_at            DateTime                  @default(now())
  updated_at            DateTime                  @default(now()) @updatedAt
  
  // Relations
  savings_account       VoluntarySavingsAccounts  @relation(fields: [savings_account_id], references: [savings_account_id])

  @@map("savings_transactions")
}

// Mid-term Access Models
model MidtermAccessApplications {
  application_id        String                    @id @default(uuid()) @db.Uuid
  pensioner_id          String                    @db.Uuid
  savings_account_id    String?                   @db.Uuid
  application_number    String                    @unique @db.VarChar(20)
  
  // Application Details
  access_reason         MidtermAccessReason
  other_reason_details  String?                   @db.Text
  requested_amount      Decimal                   @db.Decimal(15,2)
  approved_amount       Decimal?                  @db.Decimal(15,2)
  
  // Contribution Information
  total_contributions   Decimal                   @db.Decimal(15,2)
  eligible_amount       Decimal                   @db.Decimal(15,2)
  max_allowable_amount  Decimal                   @db.Decimal(15,2)
  percentage_requested  Decimal                   @db.Decimal(5,2)
  
  // Application Status
  application_status    MidtermAccessStatus       @default(DRAFT)
  current_approval_level MidtermApprovalLevel     @default(INITIAL_REVIEW)
  
  // Supporting Information
  justification         String                    @db.Text
  supporting_documents  String[]                  // Array of document URLs/paths
  emergency_contact     String?                   @db.VarChar(255)
  emergency_phone       String?                   @db.VarChar(20)
  
  // Processing Dates
  submission_date       DateTime?
  review_start_date     DateTime?
  approval_date         DateTime?
  disbursement_date     DateTime?
  
  // Processing Information
  processing_notes      String?                   @db.Text
  rejection_reason      String?                   @db.Text
  disbursement_method   String?                   @db.VarChar(50)
  disbursement_reference String?                  @db.VarChar(100)
  
  // Repayment Information (if applicable)
  repayment_required    Boolean                   @default(false)
  repayment_amount      Decimal?                  @db.Decimal(15,2)
  repayment_period      Int?                      // months
  monthly_deduction     Decimal?                  @db.Decimal(15,2)
  
  // Metadata
  created_at            DateTime                  @default(now())
  updated_at            DateTime                  @default(now()) @updatedAt
  submitted_by          String?                   @db.Uuid
  
  // Relations
  pensioner             Pensioners                @relation(fields: [pensioner_id], references: [pensioner_id])
  savings_account       VoluntarySavingsAccounts? @relation(fields: [savings_account_id], references: [savings_account_id])
  approval_workflow     MidtermApprovalWorkflow[]
  supporting_docs       MidtermSupportingDocuments[]

  @@map("midterm_access_applications")
}

model MidtermApprovalWorkflow {
  workflow_id           String                 @id @default(uuid()) @db.Uuid
  application_id        String                 @db.Uuid
  
  // Approval Step Information
  approval_level        MidtermApprovalLevel
  approver_role         UserRole
  assigned_to           String?                @db.Uuid
  
  // Status and Timing
  status                String                 @default("PENDING") @db.VarChar(20)
  assigned_date         DateTime               @default(now())
  completed_date        DateTime?
  due_date              DateTime?
  
  // Decision Information
  decision              String?                @db.VarChar(20) // APPROVED, REJECTED, RETURNED
  comments              String?                @db.Text
  conditions            String?                @db.Text
  
  // Metadata
  created_at            DateTime               @default(now())
  updated_at            DateTime               @default(now()) @updatedAt
  
  // Relations
  application           MidtermAccessApplications @relation(fields: [application_id], references: [application_id])
  approver              Users?                 @relation(fields: [assigned_to], references: [user_id])

  @@map("midterm_approval_workflow")
}

model MidtermSupportingDocuments {
  document_id           String                    @id @default(uuid()) @db.Uuid
  application_id        String                    @db.Uuid
  
  // Document Information
  document_type         String                    @db.VarChar(100)
  document_name         String                    @db.VarChar(255)
  file_path             String                    @db.VarChar(500)
  file_size             Int
  mime_type             String                    @db.VarChar(100)
  
  // Verification Status
  verification_status   DocumentVerificationStatus @default(NOT_SUBMITTED)
  verified_by           String?                   @db.Uuid
  verification_date     DateTime?
  verification_notes    String?                   @db.Text
  
  // Requirements
  is_required           Boolean                   @default(true)
  is_original_required  Boolean                   @default(false)
  
  // Metadata
  uploaded_at           DateTime                  @default(now())
  uploaded_by           String?                   @db.Uuid
  
  // Relations
  application           MidtermAccessApplications @relation(fields: [application_id], references: [application_id])
  verifier              Users?                    @relation("DocumentVerifier", fields: [verified_by], references: [user_id])
  uploader              Users?                    @relation("DocumentUploader", fields: [uploaded_by], references: [user_id])

  @@map("midterm_supporting_documents")
}

// Updated Relations - Add to existing models
// Note: These relations should be added to existing models
