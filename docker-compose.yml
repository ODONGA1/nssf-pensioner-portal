version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nssf-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nssf_pensioner_db
      POSTGRES_USER: nssf_user
      POSTGRES_PASSWORD: secure_password_change_in_production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    networks:
      - nssf-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nssf-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - nssf-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: nssf-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://nssf_user:secure_password_change_in_production@postgres:5432/nssf_pensioner_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - nssf-network

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: nssf-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api/v1
      GENERATE_SOURCEMAP: false
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - nssf-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: nssf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - nssf-network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network configuration
networks:
  nssf-network:
    driver: bridge
